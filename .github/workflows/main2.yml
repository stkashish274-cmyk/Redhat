name: ‚ôæÔ∏è Keep OpenShift VM Always Running (Continuous)

on:
  workflow_dispatch:  # manual start only (runs forever)

jobs:
  monitor-vm:
    runs-on: self-hosted
    timeout-minutes: 43200  # 30 days max per run
    steps:
      - name: üß∞ Install oc (compatible version)
        run: |
          echo "üì¶ Installing oc v4.9.59..."
          mkdir -p $HOME/bin
          cd $HOME/bin
          curl -L -o oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.9.59/openshift-client-linux.tar.gz
          tar -xzf oc.tar.gz
          chmod +x oc kubectl
          echo "$HOME/bin" >> $GITHUB_PATH
          export PATH=$HOME/bin:$PATH
          oc version --client || true

      - name: üîê Login to OpenShift
        env:
          OPENSHIFT_API_URL: ${{ secrets.OPENSHIFT_API_URL }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
        run: |
          export PATH=$HOME/bin:$PATH
          echo "üîê Logging into OpenShift..."
          ./oc login --token="$OPENSHIFT_TOKEN" --server="$OPENSHIFT_API_URL" --insecure-skip-tls-verify
          ./oc project stkcyber-dev

      - name: ‚ôæÔ∏è Keep VM Alive Forever
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          export PATH=$HOME/bin:$PATH
          VM_NAME="centos-stream9-tan-flea-48"
          NS="stkcyber-dev"

          echo "üöÄ Continuous monitor started. Checking VM every 5 minutes..."
          while true; do
            STATUS=$(./oc get vm "$VM_NAME" -n "$NS" -o jsonpath='{.status.printableStatus}' 2>/dev/null || echo "Unknown")
            TIME=$(date '+%Y-%m-%d %H:%M:%S')
            echo "[$TIME] Current VM status: $STATUS"

            if [ "$STATUS" != "Running" ]; then
              echo "‚ö†Ô∏è VM not running! Restarting..."
              ./oc delete vmi "$VM_NAME" -n "$NS" --ignore-not-found=true || true
              sleep 10
              ./oc start vm "$VM_NAME" -n "$NS" || true
              MSG="üîÅ Restarted **$VM_NAME** at $TIME ‚Äî previous status: $STATUS"
            else
              MSG="‚úÖ **$VM_NAME** is running normally at $TIME"
            fi

            if [ -n "$DISCORD_WEBHOOK_URL" ]; then
              curl -H "Content-Type: application/json" \
                   -X POST \
                   -d "{\"content\": \"$MSG\"}" \
                   "$DISCORD_WEBHOOK_URL" >/dev/null 2>&1 || true
            fi

            echo "‚è≥ Sleeping for 5 minutes..."
            sleep 300
          done
