name: Force Restart OpenShift VM (every hour)

on:
  schedule:
    - cron: "0 * * * *"   # Every hour
  workflow_dispatch:

jobs:
  restart-vm:
    runs-on: ubuntu-latest

    steps:
      - name: Install OpenShift CLI (oc)
        run: |
          echo "üì¶ Installing oc..."
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz -o oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          sudo chmod +x /usr/local/bin/oc
          oc version --client

      - name: Install virtctl
        run: |
          echo "üì¶ Installing virtctl..."
          curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/v1.5.2/virtctl-v1.5.2-linux-amd64
          chmod +x virtctl
          sudo mv virtctl /usr/local/bin/
          virtctl version || echo "virtctl installed successfully."

      - name: Login to OpenShift
        env:
          OPENSHIFT_API_URL: ${{ secrets.OPENSHIFT_API_URL }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
        run: |
          echo "üîë Logging into OpenShift..."
          oc login --token="$OPENSHIFT_TOKEN" --server="$OPENSHIFT_API_URL" --insecure-skip-tls-verify
          oc project stkcyber-dev

      - name: Force Restart VM
        run: |
          VM_NAME="centos-stream9-tan-flea-48"
          NS="stkcyber-dev"

          echo "‚èπ Forcing VM stop..."
          virtctl stop "$VM_NAME" -n "$NS" --graceful=false || echo "VM might already be stopped."

          echo "‚è≥ Waiting 20 seconds before restart..."
          sleep 20

          echo "‚ñ∂Ô∏è Starting VM..."
          virtctl start "$VM_NAME" -n "$NS"

          echo "‚è≥ Waiting for VM to reach 'Running' state..."
          for i in {1..12}; do
            STATUS=$(oc get vm "$VM_NAME" -n "$NS" -o jsonpath='{.status.printableStatus}' 2>/dev/null || echo "Unknown")
            echo "Attempt $i: $STATUS"
            if [ "$STATUS" = "Running" ]; then
              echo "‚úÖ VM is now running!"
              exit 0
            fi
            sleep 10
          done

          echo "‚ö†Ô∏è VM did not reach Running state within 2 minutes."
          exit 1

      - name: Notify Discord
        if: always()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          RESULT="${{ steps.restart.outputs.result }}"
          if [ "$RESULT" = "success" ]; then
            COLOR=3066993
            STATUS_MSG="‚úÖ VM restarted and running successfully."
          else
            COLOR=15158332
            STATUS_MSG="‚ö†Ô∏è VM restart failed or did not reach running state."
          fi

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"embeds\": [{\"title\": \"OpenShift VM Auto-Restart\", \"description\": \"$STATUS_MSG\", \"color\": $COLOR, \"footer\": {\"text\": \"$(date '+%Y-%m-%d %H:%M:%S UTC')\"}}]}" \
               "$DISCORD_WEBHOOK_URL"
