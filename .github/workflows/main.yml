name: Auto-Restart OpenShift VM (every 5 minutes)

on:
  schedule:
    - cron: "*/5 * * * *"  # Runs every 5 minutes
  workflow_dispatch:

jobs:
  keep-vm-running:
    runs-on: ubuntu-latest

    steps:
      - name: Prepare CLI tools (oc + virtctl)
        run: |
          mkdir -p $HOME/bin
          cd $HOME/bin

          echo "üì¶ Installing OpenShift CLI (compatible)..."
          curl -L -o oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.7.0/openshift-client-linux.tar.gz
          tar -xzf oc.tar.gz
          chmod +x oc kubectl

          echo "üì¶ Installing virtctl..."
          curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/v0.48.0/virtctl-v0.48.0-linux-amd64
          chmod +x virtctl

          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Login to OpenShift
        env:
          OPENSHIFT_API_URL: ${{ secrets.OPENSHIFT_API_URL }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
        run: |
          echo "üîê Logging in to OpenShift..."
          oc version --client || echo "oc not found in PATH?"
          oc login --token="$OPENSHIFT_TOKEN" --server="$OPENSHIFT_API_URL" --insecure-skip-tls-verify

          echo "üìÅ Switching to your project..."
          oc project ashisham029-dev

      - name: Check and ensure VM is running
        id: vmcheck
        run: |
          VM_NAME="centos-stream9-gray-anglerfish-48"
          NS="ashisham029-dev"

          echo "üîç Checking VM status in namespace: $NS ..."
          STATUS=$(oc get vm "$VM_NAME" -n "$NS" -o jsonpath='{.status.printableStatus}' 2>/dev/null || echo "Unknown")
          echo "üì° Current VM status: $STATUS"

          if [ "$STATUS" = "Running" ]; then
            echo "‚úÖ VM is already running."
            echo "vm_status=running" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è VM is not running. Attempting restart..."
            virtctl start "$VM_NAME" -n "$NS" || echo "‚ö†Ô∏è Start command failed."
            sleep 30
            STATUS2=$(oc get vm "$VM_NAME" -n "$NS" -o jsonpath='{.status.printableStatus}' 2>/dev/null || echo "Unknown")
            echo "üì° New status: $STATUS2"

            if [ "$STATUS2" = "Running" ]; then
              echo "‚úÖ VM restarted successfully!"
              echo "vm_status=restarted" >> $GITHUB_OUTPUT
            else
              echo "‚ùå VM did not start properly ‚Äî check OpenShift console."
              echo "vm_status=failed" >> $GITHUB_OUTPUT
            fi
          fi

      # üì£ Embedded Discord Notification Step
      - name: Send Discord Notification (Embedded)
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          STATUS="${{ steps.vmcheck.outputs.vm_status }}"
          if [ -z "$STATUS" ]; then STATUS="unknown"; fi

          case "$STATUS" in
            running)
              TITLE="‚úÖ VM Running"
              DESCRIPTION="VM \`centos-stream9-orange-swan-23\` is already running and healthy."
              COLOR=3066993   # Green
              ;;
            restarted)
              TITLE="üîÑ VM Restarted"
              DESCRIPTION="VM \`centos-stream9-orange-swan-23\` was stopped and has been **restarted successfully**."
              COLOR=3447003   # Blue
              ;;
            failed)
              TITLE="‚ùå VM Start Failed"
              DESCRIPTION="VM \`centos-stream9-orange-swan-23\` failed to start. Please check the OpenShift console."
              COLOR=15158332  # Red
              ;;
            *)
              TITLE="‚ö†Ô∏è VM Status Unknown"
              DESCRIPTION="VM \`centos-stream9-orange-swan-23\` status is unknown ‚Äî please check manually."
              COLOR=15844367  # Yellow
              ;;
          esac

          DESCRIPTION_ESCAPED=$(echo "$DESCRIPTION" | sed 's/"/\\"/g')

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                    \"embeds\": [{
                      \"title\": \"$TITLE\",
                      \"description\": \"$DESCRIPTION_ESCAPED\",
                      \"color\": $COLOR,
                      \"footer\": { \"text\": \"GitHub Actions ‚Ä¢ $(date '+%Y-%m-%d %H:%M:%S')\" },
                      \"url\": \"$RUN_URL\"
                    }]
                  }" \
               "$DISCORD_WEBHOOK"
